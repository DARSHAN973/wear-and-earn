generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
} 

model User {
  id               Int       @id @default(autoincrement()) @db.UnsignedInt
  sponsorId        Int?      @db.UnsignedInt
  fullName         String
  email            String?   @unique(map: "User_email_key")
  mobileNo         String    @unique(map: "User_mobileNo_key")
  password         String?
  role             String?   @default("user")
  createdAt        DateTime? @default(now())
  isVerified       Boolean   @default(false)
  verifyCode       String?
  verifyCodeExpiry DateTime?
  isBlocked        Boolean   @default(false)
  gender           String?

  // MLM specific fields - NEW POOL SYSTEM
  referralCode           String?  @unique
  isActive               Boolean  @default(false)
  level                  Int      @default(0)    // 0=none, 1=L1, 2=L2, 3=L3, 4=L4, 5=L5
  teamCount              Int      @default(0)    // Total teams formed (direct + cascaded)
  directTeams            Int      @default(0)    // Direct teams formed
  kycStatus              Boolean  @default(false) // KYC approval status
  walletBalance          Int      @default(0)    // paisa
  
  // Legacy fields (keep for backward compatibility)
  isKycApproved          Boolean  @default(false)
  lastMonthPurchase      Int      @default(0) // paisa
  monthlyPurchase        Int      @default(0) // paisa
  isEligibleRepurchase   Boolean  @default(false)

  cart      Cart[]
  address   Address?
  orders    Order[]  @relation("UserOrders")
  sponsor   User?    @relation("UserSponsor", fields: [sponsorId], references: [id])
  referrals User[]   @relation("UserSponsor")

  // NEW POOL MLM SYSTEM relationships
  purchases         Purchase[]
  walletTransactions Wallet[]
  poolDistributions PoolDistribution[]
  selfIncomeInstallments SelfIncomeInstallment[]
  newWithdrawals    NewWithdrawal[]
  teams             Team[]
  teamMemberships   TeamMember[]

  // Legacy MLM relationships (keep for backward compatibility)
  node              MatrixNode?
  ledgerEntries     Ledger[]
  payoutSchedules   SelfPayoutSchedule[]
  ancestorHierarchy Hierarchy[] @relation("HierarchyAncestor")
  descendantHierarchy Hierarchy[] @relation("HierarchyDescendant")
  kycData           KycData?
  
  // Commission relationships
  commissions       Commission[] @relation("UserCommissions")
  generatedCommissions Commission[] @relation("CommissionSource")
  
  // Withdrawal relationships
  withdrawalRequests    WithdrawalRequest[] @relation("UserWithdrawals")
  processedWithdrawals  WithdrawalRequest[] @relation("ProcessedWithdrawals")

  @@index([sponsorId], map: "users_sponsorId_fkey")
  @@index([referralCode])
  @@index([isActive])
  @@map("users")
}

model Address {
  id            Int     @id @default(autoincrement()) @db.UnsignedInt
  userId        Int     @unique @db.UnsignedInt
  houseNumber   String?
  area          String
  landmark      String?
  villageOrCity String
  taluka        String
  district      String
  pinCode       Int
  state         String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, map: "address_userId_fkey")

  @@map("address")
}

model Category {
  id          Int     @id @default(autoincrement()) @db.UnsignedInt
  name        String  @unique(map: "Category_name_key")
  description String?
  status      Boolean @default(true)

  products Product[]

  @@map("category")
}

model Product {
  id              Int            @id @default(autoincrement()) @db.UnsignedInt
  title           String
  description     String
  longDescription String         @db.Text
  inStock         Int            @default(1)
  categoryId      Int?           @db.UnsignedInt
  isActive        Boolean        @default(false)
  discount        Float?
  profit          Float?
  gst             Float?
  gatewayFee      Float?
  homeDelivery    Float?
  price           Float
  sellingPrice    Float
  keyFeature      String?
  mainImage       String?
  manufacturer    String?
  type            ProductType    @default(REGULAR)
  
  // NEW MLM SYSTEM - Pool based
  productPrice    Float?         // Normal product cost
  mlmPrice        Float?         // MLM amount for pool system
  
  // Legacy MLM fields (keep for backward compatibility)
  commissionAmount Int           @default(0) // commission in paisa per item
  createdAt       DateTime?      @default(now())
  
  // Relationships
  cart            Cart[]
  images          ProductImage[]
  category        Category?      @relation(fields: [categoryId], references: [id])
  purchases       Purchase[]     // NEW: MLM purchase tracking

  @@index([categoryId], map: "Product_categoryId_fkey")
  @@map("products")
}

model ProductImage {
  id        Int     @id @default(autoincrement()) @db.UnsignedInt
  productId Int     @db.UnsignedInt
  imageUrl  String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "productimages_productId_fkey")
  @@map("productimages")
}

model Cart {
  id        Int     @id @default(autoincrement()) @db.UnsignedInt
  productId Int     @db.UnsignedInt
  userId    Int     @db.UnsignedInt
  quantity  Int     @default(1)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "cart_productId_fkey")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "cart_userId_fkey")

  @@index([productId], map: "cart_productId_fkey")
  @@index([userId], map: "cart_userId_fkey")
  @@map("cart")
}

model Order {
  id               Int             @id @default(autoincrement()) @db.UnsignedInt
  userId           Int?            @db.UnsignedInt
  deliveryman      String?
  paymentId        String?
  total            Float
  deliveryCharges  Float           @default(0)
  commissionAmount Int             @default(0) // commission in paisa
  gstAmount        Float
  address          String          @db.Text
  orderNotice      String?
  status           OrderStatus
  createdAt        DateTime        @default(now())
  deliveredAt      DateTime?
  
  // MLM specific fields
  isJoiningOrder   Boolean         @default(false) // true if first ever paid order for this user
  gatewayOrderId   String?         @unique // razorpay order id
  paidAt           DateTime?
  
  user             User?           @relation("UserOrders", fields: [userId], references: [id], onDelete: Restrict)
  orderProducts    OrderProducts[]
  commissions      Commission[]
  purchases        Purchase[]      // NEW: MLM purchase tracking

  @@index([userId], map: "order_userId_fkey")
  @@index([gatewayOrderId])
  @@index([status])
  @@map("order")
}

model OrderProducts {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  orderId      Int    @db.UnsignedInt
  productId    Int?
  title        String
  quantity     Int
  sellingPrice Float
  discount     Float
  gst          Float
  finalMRP     Float
  homeDelivery Float
  totalPrice   Float
  order        Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "orderproducts_orderId_fkey")
  @@index([productId], map: "orderproducts_productId_fkey")
  @@map("orderproducts")
}

// MLM specific models
model MatrixNode {
  userId   Int  @id @db.UnsignedInt
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId Int? @db.UnsignedInt
  parent   MatrixNode? @relation("MatrixParent", fields: [parentId], references: [userId])
  children MatrixNode[] @relation("MatrixParent")
  position Int? // 1..3 relative to parent (tri-matrix width)

  @@index([parentId])
  @@map("matrix_nodes")
}

model Hierarchy {
  id           Int @id @default(autoincrement()) @db.UnsignedInt
  ancestorId   Int @db.UnsignedInt
  descendantId Int @db.UnsignedInt
  depth        Int // 1..5 (updated from 7 to 5-level structure)

  ancestor   User @relation("HierarchyAncestor", fields: [ancestorId], references: [id], onDelete: Cascade)
  descendant User @relation("HierarchyDescendant", fields: [descendantId], references: [id], onDelete: Cascade)

  @@unique([ancestorId, descendantId])
  @@index([descendantId, depth])
  @@index([ancestorId, depth])
  @@map("hierarchy")
}

model Ledger {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  userId       Int?     @db.UnsignedInt // null for company/system fund
  type         String   // company_fund | sponsor_commission | self_joining_instalment | repurchase_commission | rollup_to_company | withdrawal_debit | reversal | WITHDRAWAL_REQUEST | WITHDRAWAL_APPROVED | WITHDRAWAL_REFUND | order_processed
  amount       Int      // +credit, -debit in paisa
  description  String?  // human readable description
  referenceId  String?  // reference to related entity (orderId, withdrawalId, etc.)
  ref          String?  @unique // idempotency key to prevent duplicate processing
  balanceAfter Int?     // wallet balance after this transaction
  levelDepth   Int?
  note         String?
  createdAt    DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([referenceId])
  @@index([ref])
  @@map("ledger")
}

model SelfPayoutSchedule {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  userId      Int      @db.UnsignedInt
  orderId     Int      @db.UnsignedInt
  amount      Int      // this instalment amount in paisa
  dueAt       DateTime // weekly cadence
  status      String   @default("scheduled") // scheduled|paid|skipped|pending_eligibility
  ref         String?  // idempotency reference key
  description String?  // description for audit trail
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([dueAt, status])
  @@index([ref])
  @@map("self_payout_schedule")
}

model Commission {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  userId      Int      @db.UnsignedInt // user receiving commission
  fromUserId  Int      @db.UnsignedInt // user whose action generated commission
  orderId     Int?     @db.UnsignedInt // related order
  amount      Int      // commission amount in paisa
  level       Int      // 1-5 for level commissions
  type        String   // joining|repurchase|bonus|rollup
  description String?  // human readable description
  isEligible  Boolean  @default(true)
  createdAt   DateTime @default(now())

  user     User  @relation("UserCommissions", fields: [userId], references: [id], onDelete: Cascade)
  fromUser User  @relation("CommissionSource", fields: [fromUserId], references: [id], onDelete: Cascade)
  order    Order? @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@index([userId, type])
  @@index([fromUserId])
  @@index([orderId])
  @@index([createdAt])
  @@map("commissions")
}

model Config {
  key   String @id
  value Json

  @@map("config")
}

enum OrderStatus {
  inProcess
  pending
  delivered
}

enum ProductType {
  REGULAR
  TRENDING
  MLM
}

model ContactForm {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String?
  message   String?
  createdAt DateTime @default(now())
}

model Banners {
  id        Int      @id @default(autoincrement())
  title     String
  imageUrl  String
  link      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model KycData {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique @db.UnsignedInt
  fullName         String
  dateOfBirth      DateTime
  gender           String
  fatherName       String?
  aadharNumber     String
  panNumber        String
  bankAccountNumber String
  ifscCode         String
  bankName         String?
  branchName       String?
  nomineeName      String?
  nomineeRelation  String?
  status           String   @default("pending") // pending, approved, rejected
  submittedAt      DateTime @default(now())
  reviewedAt       DateTime?
  reviewNote       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model WithdrawalRequest {
  id            Int       @id @default(autoincrement())
  userId        Int       @db.UnsignedInt
  amount        Float     // withdrawal amount
  method        String    // bank_transfer, upi, paytm
  details       Json?     // method-specific details (account info, etc.)
  status        String    @default("pending") // pending, approved, rejected
  requestedAt   DateTime  @default(now())
  processedAt   DateTime?
  processedBy   Int?      @db.UnsignedInt // admin user id
  adminNotes    String?
  transactionId String?   // bank transaction reference
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user            User  @relation("UserWithdrawals", fields: [userId], references: [id], onDelete: Cascade)
  processedByUser User? @relation("ProcessedWithdrawals", fields: [processedBy], references: [id])

  @@index([userId])
  @@index([status])
  @@index([requestedAt])
  @@map("withdrawal_requests")
}

// Webhook idempotency tracking
model WebhookLog {
  id          Int      @id @default(autoincrement())
  webhookId   String   @unique // payment/order ID from webhook
  event       String   // webhook event type
  processedAt DateTime @default(now())
  payload     String?  @db.Text // JSON payload for debugging
  createdAt   DateTime @default(now())

  @@index([webhookId])
  @@index([event])
  @@index([processedAt])
  @@map("webhook_logs")
}

// ================================
// NEW POOL-BASED MLM SYSTEM MODELS
// ================================

// MLM Purchase tracking
model Purchase {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  userId     Int      @db.UnsignedInt
  productId  Int      @db.UnsignedInt
  orderId    Int      @db.UnsignedInt
  type       String   // "first" | "repurchase"
  mlmAmount  Int      // MLM amount in paisa (from product.mlmPrice)
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])
  selfIncomeInstallments SelfIncomeInstallment[]

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("purchases")
}

// Wallet transactions for all MLM earnings
model Wallet {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  userId     Int      @db.UnsignedInt
  type       String   // "self_income" | "pool_distribution" | "withdrawal"
  amount     Int      // Amount in paisa
  status     String   // "pending" | "completed" | "cancelled"
  reference  String?  // Reference for tracking (purchase_id, pool_id, etc.)
  description String? // Human readable description
  createdAt  DateTime @default(now())
  processedAt DateTime?

  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("wallet_transactions")
}

// Global Turnover Pool
model TurnoverPool {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  totalAmount Int      @default(0) // Total pool amount in paisa
  l1Amount    Int      @default(0) // 30% for L1 users
  l2Amount    Int      @default(0) // 20% for L2 users
  l3Amount    Int      @default(0) // 20% for L3 users
  l4Amount    Int      @default(0) // 15% for L4 users
  l5Amount    Int      @default(0) // 15% for L5 users
  distributed Boolean  @default(false)
  createdAt   DateTime @default(now())
  distributedAt DateTime?

  distributions PoolDistribution[]

  @@index([distributed])
  @@index([createdAt])
  @@map("turnover_pool")
}

// Pool distribution records
model PoolDistribution {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  userId     Int      @db.UnsignedInt
  level      Int      // 1-5
  amount     Int      // Amount received in paisa
  poolId     Int      @db.UnsignedInt
  createdAt  DateTime @default(now())

  user       User          @relation(fields: [userId], references: [id])
  pool       TurnoverPool  @relation(fields: [poolId], references: [id])

  @@index([userId])
  @@index([level])
  @@index([poolId])
  @@map("pool_distributions")
}

// Self income installments (4 weekly payments)
model SelfIncomeInstallment {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  userId     Int      @db.UnsignedInt
  purchaseId Int      @db.UnsignedInt
  amount     Int      // Weekly installment amount in paisa
  weekNumber Int      // 1-4
  status     String   @default("scheduled") // "scheduled" | "paid" | "cancelled"
  dueDate    DateTime
  paidAt     DateTime?
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  purchase   Purchase @relation(fields: [purchaseId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([dueDate])
  @@map("self_income_installments")
}

// Withdrawal requests (updated for new system)
model NewWithdrawal {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  userId     Int      @db.UnsignedInt
  amount     Int      // Withdrawal amount in paisa
  status     String   @default("requested") // "requested" | "approved" | "rejected" | "paid"
  bankDetails String? @db.Text // JSON string with bank details
  adminNotes String?  @db.Text
  createdAt  DateTime @default(now())
  processedAt DateTime?

  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("new_withdrawals")
}

// Team tracking for cascading teams
model Team {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  userId     Int      @db.UnsignedInt // Team owner
  teamSize   Int      @default(0)     // Number of first purchases in this team
  isComplete Boolean  @default(false) // True when team reaches 3 members
  createdAt  DateTime @default(now())
  completedAt DateTime?

  user       User     @relation(fields: [userId], references: [id])
  members    TeamMember[]

  @@index([userId])
  @@index([isComplete])
  @@map("teams")
}

// Team members tracking
model TeamMember {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  teamId     Int      @db.UnsignedInt
  userId     Int      @db.UnsignedInt // Member who made first purchase
  joinedAt   DateTime @default(now())

  team       Team     @relation(fields: [teamId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([teamId])
  @@index([userId])
  @@map("team_members")
}
