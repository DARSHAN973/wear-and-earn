generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                     @id @default(autoincrement()) @db.UnsignedInt
  sponsorId              Int?                    @db.UnsignedInt
  fullName               String
  email                  String?                 @unique(map: "User_email_key")
  mobileNo               String                  @unique(map: "User_mobileNo_key")
  password               String?
  role                   String?                 @default("user")
  createdAt              DateTime?               @default(now())
  isVerified             Boolean                 @default(false)
  verifyCode             String?
  verifyCodeExpiry       DateTime?
  isBlocked              Boolean                 @default(false)
  gender                 String?
  referralCode           String?                 @unique
  isActive               Boolean                 @default(false)
  isKycApproved          Boolean                 @default(false)
  lastMonthPurchase      Int                     @default(0)
  monthlyPurchase        Int                     @default(0)
  isEligibleRepurchase   Boolean                 @default(false)
  walletBalance          Int                     @default(0)
  directTeams            Int                     @default(0)
  kycStatus              Boolean                 @default(false)
  level                  Int                     @default(0)
  teamCount              Int                     @default(0)
  kycData                KycData?
  address                Address?
  cart                   Cart[]
  
  // NEW POOL MLM SYSTEM relationships
  newWithdrawals         NewWithdrawal[]
  orders                 Order[]                 @relation("UserOrders")
  poolDistributions      PoolDistribution[]
  purchases              Purchase[]
  selfIncomeInstallments SelfIncomeInstallment[]
  teamMemberships        TeamMember[]
  teams                  Team[]
  walletTransactions     Wallet[]
  payoutSchedules        SelfPayoutSchedule[]
  
  // Referral relationships
  sponsor                User?                   @relation("UserSponsor", fields: [sponsorId], references: [id])
  referrals              User[]                  @relation("UserSponsor")
  
  // Keep withdrawal system
  processedWithdrawals   WithdrawalRequest[]     @relation("ProcessedWithdrawals")
  withdrawalRequests     WithdrawalRequest[]     @relation("UserWithdrawals")

  // OLD MLM SYSTEM (commented out - will be removed after full migration)
  // generatedCommissions   Commission[]            @relation("CommissionSource")
  // commissions            Commission[]            @relation("UserCommissions")
  // ancestorHierarchy      Hierarchy[]             @relation("HierarchyAncestor")
  // descendantHierarchy    Hierarchy[]             @relation("HierarchyDescendant")
  ledgerEntries          Ledger[]
  // node                   MatrixNode?

  @@index([sponsorId], map: "users_sponsorId_fkey")
  @@index([referralCode])
  @@index([isActive])
  @@map("users")
}

model Address {
  id            Int     @id @default(autoincrement()) @db.UnsignedInt
  userId        Int     @unique @db.UnsignedInt
  houseNumber   String?
  area          String
  landmark      String?
  villageOrCity String
  taluka        String
  district      String
  pinCode       Int
  state         String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "address_userId_fkey")

  @@map("address")
}

model Category {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  name        String    @unique(map: "Category_name_key")
  description String?
  status      Boolean   @default(true)
  products    Product[]

  @@map("category")
}

model Product {
  id               Int            @id @default(autoincrement()) @db.UnsignedInt
  title            String
  description      String
  longDescription  String         @db.Text
  inStock          Int            @default(1)
  categoryId       Int?           @db.UnsignedInt
  isActive         Boolean        @default(false)
  discount         Float?
  gst              Float?
  homeDelivery     Float?
  price            Float
  sellingPrice     Float
  keyFeature       String?
  mainImage        String?
  type             ProductType    @default(REGULAR)
  createdAt        DateTime?      @default(now())
  // NEW PRICING STRUCTURE - Following the spec
  productPrice     Float?         // Pr - Product Price (goes to company) - Optional for existing products
  mlmPrice         Float?         // Pm - MLM Price (30% company, 70% pool) - Optional for existing products
  cart             Cart[]
  images           ProductImage[]
  category         Category?      @relation(fields: [categoryId], references: [id])
  purchases        Purchase[]

  @@index([categoryId], map: "Product_categoryId_fkey")
  @@map("products")
}

model ProductImage {
  id        Int     @id @default(autoincrement()) @db.UnsignedInt
  productId Int     @db.UnsignedInt
  imageUrl  String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "productimages_productId_fkey")
  @@map("productimages")
}

model Cart {
  id        Int     @id @default(autoincrement()) @db.UnsignedInt
  productId Int     @db.UnsignedInt
  userId    Int     @db.UnsignedInt
  quantity  Int     @default(1)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "cart_productId_fkey")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "cart_userId_fkey")

  @@index([productId], map: "cart_productId_fkey")
  @@index([userId], map: "cart_userId_fkey")
  @@map("cart")
}

model Order {
  id               Int             @id @default(autoincrement()) @db.UnsignedInt
  userId           Int?            @db.UnsignedInt
  deliveryman      String?
  paymentId        String?
  total            Float
  deliveryCharges  Float           @default(0)
  commissionAmount Int             @default(0)
  gstAmount        Float
  address          String          @db.Text
  orderNotice      String?
  status           OrderStatus
  createdAt        DateTime        @default(now())
  deliveredAt      DateTime?
  isJoiningOrder   Boolean         @default(false)
  gatewayOrderId   String?         @unique
  paidAt           DateTime?
  
  // NEW POOL MLM SYSTEM relationships
  user             User?           @relation("UserOrders", fields: [userId], references: [id], onDelete: Restrict)
  orderProducts    OrderProducts[]
  purchases        Purchase[]      // Pool MLM purchase tracking
  
  // OLD MLM SYSTEM (commented out)
  // commissions      Commission[]

  @@index([userId], map: "order_userId_fkey")
  @@index([gatewayOrderId])
  @@index([status])
  @@map("order")
}

model OrderProducts {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  orderId      Int    @db.UnsignedInt
  productId    Int?
  title        String
  quantity     Int
  sellingPrice Float
  discount     Float
  gst          Float
  finalMRP     Float
  homeDelivery Float
  totalPrice   Float
  order        Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "orderproducts_orderId_fkey")
  @@index([productId], map: "orderproducts_productId_fkey")
  @@map("orderproducts")
}

// Old MLM system - commented out
// model MatrixNode {
//   userId   Int          @id @db.UnsignedInt
//   parentId Int?         @db.UnsignedInt
//   position Int?
//   parent   MatrixNode?  @relation("MatrixParent", fields: [parentId], references: [userId])
//   children MatrixNode[] @relation("MatrixParent")
//   user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
// 
//   @@index([parentId])
//   @@map("matrix_nodes")
// }

// model Hierarchy {
//   id           Int  @id @default(autoincrement()) @db.UnsignedInt
//   ancestorId   Int  @db.UnsignedInt
//   descendantId Int  @db.UnsignedInt
//   depth        Int
//   ancestor     User @relation("HierarchyAncestor", fields: [ancestorId], references: [id], onDelete: Cascade)
//   descendant   User @relation("HierarchyDescendant", fields: [descendantId], references: [id], onDelete: Cascade)
// 
//   @@unique([ancestorId, descendantId])
//   @@index([descendantId, depth])
//   @@index([ancestorId, depth])
//   @@map("hierarchy")
// }

model Ledger {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  userId       Int?     @db.UnsignedInt
  type         String
  amount       Int
  description  String?
  referenceId  String?
  balanceAfter Int?
  levelDepth   Int?
  note         String?
  createdAt    DateTime @default(now())
  ref          String?  @unique
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([referenceId])
  @@index([ref])
  @@map("ledger")
}

model SelfPayoutSchedule {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  userId      Int      @db.UnsignedInt
  orderId     Int      @db.UnsignedInt
  amount      Int
  dueAt       DateTime
  status      String   @default("scheduled")
  createdAt   DateTime @default(now())
  description String?
  ref         String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([dueAt, status])
  @@index([ref])
  @@map("self_payout_schedule")
}

// model Commission {
//   id          Int      @id @default(autoincrement()) @db.UnsignedInt
//   userId      Int      @db.UnsignedInt
//   fromUserId  Int      @db.UnsignedInt
//   orderId     Int?     @db.UnsignedInt
//   amount      Int
//   level       Int
//   type        String
//   description String?
//   isEligible  Boolean  @default(true)
//   createdAt   DateTime @default(now())
//   fromUser    User     @relation("CommissionSource", fields: [fromUserId], references: [id], onDelete: Cascade)
//   order       Order?   @relation(fields: [orderId], references: [id])
//   user        User     @relation("UserCommissions", fields: [userId], references: [id], onDelete: Cascade)
// 
//   @@index([userId, type])
//   @@index([fromUserId])
//   @@index([orderId])
//   @@index([createdAt])
//   @@map("commissions")
// }

model Config {
  key   String @id
  value Json

  @@map("config")
}

model ContactForm {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String?
  message   String?
  createdAt DateTime @default(now())
}

model Banners {
  id        Int      @id @default(autoincrement())
  title     String
  imageUrl  String
  link      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model KycData {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique @db.UnsignedInt
  fullName          String
  dateOfBirth       DateTime
  gender            String
  fatherName        String?
  aadharNumber      String
  panNumber         String
  bankAccountNumber String
  ifscCode          String
  bankName          String?
  branchName        String?
  nomineeName       String?
  nomineeRelation   String?
  status            String    @default("pending")
  submittedAt       DateTime  @default(now())
  reviewedAt        DateTime?
  reviewNote        String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model WithdrawalRequest {
  id              Int       @id @default(autoincrement())
  userId          Int       @db.UnsignedInt
  amount          Float
  method          String
  details         Json?
  status          String    @default("pending")
  requestedAt     DateTime  @default(now())
  processedAt     DateTime?
  processedBy     Int?      @db.UnsignedInt
  adminNotes      String?
  transactionId   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  processedByUser User?     @relation("ProcessedWithdrawals", fields: [processedBy], references: [id])
  user            User      @relation("UserWithdrawals", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([requestedAt])
  @@index([processedBy], map: "withdrawal_requests_processedBy_fkey")
  @@map("withdrawal_requests")
}

model WebhookLog {
  id          Int      @id @default(autoincrement())
  webhookId   String   @unique
  event       String
  processedAt DateTime @default(now())
  payload     String?  @db.Text
  createdAt   DateTime @default(now())

  @@index([webhookId])
  @@index([event])
  @@index([processedAt])
  @@map("webhook_logs")
}

model Purchase {
  id                     Int                     @id @default(autoincrement()) @db.UnsignedInt
  userId                 Int                     @db.UnsignedInt
  productId              Int                     @db.UnsignedInt
  orderId                Int                     @db.UnsignedInt
  type                   String
  mlmAmount              Int
  createdAt              DateTime                @default(now())
  order                  Order                   @relation(fields: [orderId], references: [id])
  product                Product                 @relation(fields: [productId], references: [id])
  user                   User                    @relation(fields: [userId], references: [id])
  selfIncomeInstallments SelfIncomeInstallment[]

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([orderId], map: "purchases_orderId_fkey")
  @@index([productId], map: "purchases_productId_fkey")
  @@map("purchases")
}

model Wallet {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  userId      Int       @db.UnsignedInt
  type        String
  amount      Int
  status      String
  reference   String?
  description String?
  createdAt   DateTime  @default(now())
  processedAt DateTime?
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("wallet_transactions")
}

model TurnoverPool {
  id            Int                @id @default(autoincrement()) @db.UnsignedInt
  totalAmount   Int                @default(0)
  l1Amount      Int                @default(0)
  l2Amount      Int                @default(0)
  l3Amount      Int                @default(0)
  l4Amount      Int                @default(0)
  l5Amount      Int                @default(0)
  distributed   Boolean            @default(false)
  createdAt     DateTime           @default(now())
  distributedAt DateTime?
  distributions PoolDistribution[]

  @@index([distributed])
  @@index([createdAt])
  @@map("turnover_pool")
}

model PoolDistribution {
  id        Int          @id @default(autoincrement()) @db.UnsignedInt
  userId    Int          @db.UnsignedInt
  level     Int
  amount    Int
  poolId    Int          @db.UnsignedInt
  createdAt DateTime     @default(now())
  pool      TurnoverPool @relation(fields: [poolId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([level])
  @@index([poolId])
  @@map("pool_distributions")
}

model SelfIncomeInstallment {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  userId     Int       @db.UnsignedInt
  purchaseId Int       @db.UnsignedInt
  amount     Int
  weekNumber Int
  status     String    @default("scheduled")
  dueDate    DateTime
  paidAt     DateTime?
  createdAt  DateTime  @default(now())
  purchase   Purchase  @relation(fields: [purchaseId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([dueDate])
  @@index([purchaseId], map: "self_income_installments_purchaseId_fkey")
  @@map("self_income_installments")
}

model NewWithdrawal {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  userId      Int       @db.UnsignedInt
  amount      Int
  status      String    @default("requested")
  bankDetails String?   @db.Text
  adminNotes  String?   @db.Text
  createdAt   DateTime  @default(now())
  processedAt DateTime?
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("new_withdrawals")
}

model Team {
  id          Int          @id @default(autoincrement()) @db.UnsignedInt
  userId      Int          @db.UnsignedInt
  teamSize    Int          @default(0)
  isComplete  Boolean      @default(false)
  createdAt   DateTime     @default(now())
  completedAt DateTime?
  members     TeamMember[]
  user        User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isComplete])
  @@map("teams")
}

model TeamMember {
  id       Int      @id @default(autoincrement()) @db.UnsignedInt
  teamId   Int      @db.UnsignedInt
  userId   Int      @db.UnsignedInt
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@index([teamId])
  @@index([userId])
  @@map("team_members")
}

enum OrderStatus {
  inProcess
  pending
  delivered
}

enum ProductType {
  REGULAR
  TRENDING
  MLM
}
