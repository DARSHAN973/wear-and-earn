generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                     @id @default(autoincrement()) @db.UnsignedInt
  sponsorId               Int?                    @db.UnsignedInt
  fullName                String
  email                   String?                 @unique(map: "User_email_key")
  mobileNo                String                  @unique(map: "User_mobileNo_key")
  password                String?
  role                    String?                 @default("user")
  createdAt               DateTime?               @default(now())
  isVerified              Boolean                 @default(false)
  verifyCode              String?
  verifyCodeExpiry        DateTime?
  isBlocked               Boolean                 @default(false)
  gender                  String?
  isActive                Boolean                 @default(false)
  isEligibleRepurchase    Boolean                 @default(false)
  lastMonthPurchase       Int                     @default(0)
  monthlyPurchase         Int                     @default(0)
  referralCode            String?                 @unique
  walletBalance           Int                     @default(0)
  directTeams             Int                     @default(0)
  kycStatus               KYCStatus               @default(PENDING)
  level                   Int                     @default(0)
  teamCount               Int                     @default(0)
  currentLevel            MLMLevel                @default(NONE)
  firstPurchaseDate       DateTime?
  totalSelfIncomeEarned   Float                   @default(0)
  totalPoolIncomeEarned   Float                   @default(0)
  totalTeams              Int                     @default(0)
  kycData                 KycData?
  address                 Address?
  cart                    Cart[]
  reviewedKYC             KYCSubmission[]         @relation("AdminReviewedKYC")
  kycSubmissions          KYCSubmission[]         @relation("UserKYCSubmissions")
  ledgerEntries           Ledger[]
  newWithdrawals          NewWithdrawal[]
  orders                  Order[]                 @relation("UserOrders")
  adminDistributions      PoolDistribution[]      @relation("AdminDistributions")
  poolTransactions        PoolTransaction[]       @relation("UserPoolTransactions")
  purchases               Purchase[]
  referredBy              ReferralTracking[]      @relation("UserReferredBy")
  userReferrals           ReferralTracking[]      @relation("UserReferrals")
  selfIncomeInstallments  SelfIncomeInstallment[]
  adminSelfIncomePayments SelfIncomePayment[]     @relation("AdminSelfIncomePayments")
  selfIncomePayments      SelfIncomePayment[]     @relation("UserSelfIncomePayments")
  payoutSchedules         SelfPayoutSchedule[]
  teamMemberships         TeamMember[]
  teamsAsMember1          Team[]                  @relation("TeamMember1")
  teamsAsMember2          Team[]                  @relation("TeamMember2")
  teamsAsMember3          Team[]                  @relation("TeamMember3")
  teamsAsLeader           Team[]                  @relation("TeamLeader")
  sponsor                 User?                   @relation("UserSponsor", fields: [sponsorId], references: [id])
  referrals               User[]                  @relation("UserSponsor")
  walletTransactions      Wallet[]
  processedWithdrawals    WithdrawalRequest[]     @relation("ProcessedWithdrawals")
  withdrawalRequests      WithdrawalRequest[]     @relation("UserWithdrawals")

  @@index([sponsorId], map: "users_sponsorId_fkey")
  @@index([referralCode])
  @@index([isActive])
  @@map("users")
}

model Address {
  id            Int     @id @default(autoincrement()) @db.UnsignedInt
  userId        Int     @unique @db.UnsignedInt
  houseNumber   String?
  area          String
  landmark      String?
  villageOrCity String
  taluka        String
  district      String
  pinCode       Int
  state         String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "address_userId_fkey")

  @@map("address")
}

model Category {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  name        String    @unique(map: "Category_name_key")
  description String?
  status      Boolean   @default(true)
  products    Product[]

  @@map("category")
}

model Product {
  id               Int               @id @default(autoincrement()) @db.UnsignedInt
  title            String
  description      String
  longDescription  String            @db.Text
  inStock          Int               @default(1)
  categoryId       Int?              @db.UnsignedInt
  isActive         Boolean           @default(false)
  discount         Float?
  gst              Float?
  homeDelivery     Float?
  price            Float
  sellingPrice     Float
  createdAt        DateTime?         @default(now())
  keyFeature       String?
  type             ProductType       @default(REGULAR)
  mlmPrice         Float?
  productPrice     Float?
  cart             Cart[]
  poolTransactions PoolTransaction[] @relation("ProductPoolTransactions")
  images           ProductImage[]
  category         Category?         @relation(fields: [categoryId], references: [id])
  purchases        Purchase[]

  @@index([categoryId], map: "Product_categoryId_fkey")
  @@map("products")
}

model ProductImage {
  id        Int     @id @default(autoincrement()) @db.UnsignedInt
  productId Int     @db.UnsignedInt
  imageUrl  String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "productimages_productId_fkey")
  @@map("productimages")
}

model Cart {
  id        Int     @id @default(autoincrement()) @db.UnsignedInt
  productId Int     @db.UnsignedInt
  userId    Int     @db.UnsignedInt
  quantity  Int     @default(1)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "cart_productId_fkey")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "cart_userId_fkey")

  @@index([productId], map: "cart_productId_fkey")
  @@index([userId], map: "cart_userId_fkey")
  @@map("cart")
}

model Order {
  id               Int             @id @default(autoincrement()) @db.UnsignedInt
  userId           Int?            @db.UnsignedInt
  deliveryman      String?
  paymentId        String?
  total            Float
  deliveryCharges  Float           @default(0)
  commissionAmount Int             @default(0)
  gstAmount        Float
  address          String          @db.Text
  orderNotice      String?
  status           OrderStatus
  createdAt        DateTime        @default(now())
  deliveredAt      DateTime?
  gatewayOrderId   String?         @unique
  isJoiningOrder   Boolean         @default(false)
  paidAt           DateTime?
  user             User?           @relation("UserOrders", fields: [userId], references: [id], onDelete: Restrict)
  orderProducts    OrderProducts[]
  purchases        Purchase[]

  @@index([userId], map: "order_userId_fkey")
  @@index([gatewayOrderId])
  @@index([status])
  @@map("order")
}

model OrderProducts {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  orderId      Int    @db.UnsignedInt
  productId    Int?
  title        String
  quantity     Int
  sellingPrice Float
  discount     Float
  gst          Float
  finalMRP     Float
  homeDelivery Float
  totalPrice   Float
  order        Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "orderproducts_orderId_fkey")
  @@index([productId], map: "orderproducts_productId_fkey")
  @@map("orderproducts")
}

model Ledger {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  userId       Int?     @db.UnsignedInt
  type         String
  ref          String?  @unique
  amount       Int
  levelDepth   Int?
  note         String?
  createdAt    DateTime @default(now())
  balanceAfter Int?
  description  String?
  referenceId  String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([referenceId])
  @@index([ref])
  @@map("ledger")
}

model SelfPayoutSchedule {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  userId      Int      @db.UnsignedInt
  orderId     Int      @db.UnsignedInt
  amount      Int
  dueAt       DateTime
  status      String   @default("scheduled")
  createdAt   DateTime @default(now())
  description String?
  ref         String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([dueAt, status])
  @@index([ref])
  @@map("self_payout_schedule")
}

model Config {
  key   String @id
  value Json

  @@map("config")
}

model ContactForm {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String?
  message   String?
  createdAt DateTime @default(now())
}

model Banners {
  id        Int      @id @default(autoincrement())
  title     String
  imageUrl  String
  link      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model KycData {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique @db.UnsignedInt
  fullName          String
  dateOfBirth       DateTime
  gender            String
  fatherName        String?
  aadharNumber      String
  panNumber         String
  bankAccountNumber String
  ifscCode          String
  bankName          String?
  branchName        String?
  nomineeName       String?
  nomineeRelation   String?
  status            String    @default("pending")
  submittedAt       DateTime  @default(now())
  reviewedAt        DateTime?
  reviewNote        String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model WithdrawalRequest {
  id              Int       @id @default(autoincrement())
  userId          Int       @db.UnsignedInt
  amount          Float
  method          String
  details         Json?
  status          String    @default("pending")
  requestedAt     DateTime  @default(now())
  processedAt     DateTime?
  processedBy     Int?      @db.UnsignedInt
  adminNotes      String?
  transactionId   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  processedByUser User?     @relation("ProcessedWithdrawals", fields: [processedBy], references: [id])
  user            User      @relation("UserWithdrawals", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([requestedAt])
  @@index([processedBy], map: "withdrawal_requests_processedBy_fkey")
  @@map("withdrawal_requests")
}

model WebhookLog {
  id          Int      @id @default(autoincrement())
  webhookId   String   @unique
  event       String
  processedAt DateTime @default(now())
  payload     String?  @db.Text
  createdAt   DateTime @default(now())

  @@index([webhookId])
  @@index([event])
  @@index([processedAt])
  @@map("webhook_logs")
}

model Purchase {
  id                     Int                     @id @default(autoincrement()) @db.UnsignedInt
  userId                 Int                     @db.UnsignedInt
  productId              Int                     @db.UnsignedInt
  orderId                Int                     @db.UnsignedInt
  type                   String
  mlmAmount              Int
  createdAt              DateTime                @default(now())
  companyShareAmount     Float                   @default(0)
  mlmPriceAtTime         Float?
  poolContributionAmount Float                   @default(0)
  selfIncomeAmount       Float                   @default(0)
  poolTransactions       PoolTransaction[]       @relation("PurchasePoolTransactions")
  order                  Order                   @relation(fields: [orderId], references: [id])
  product                Product                 @relation(fields: [productId], references: [id])
  user                   User                    @relation(fields: [userId], references: [id])
  referralFirstPurchases ReferralTracking[]      @relation("ReferralFirstPurchase")
  selfIncomeInstallments SelfIncomeInstallment[]
  selfIncomePayments     SelfIncomePayment[]     @relation("PurchaseSelfIncomePayments")

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([orderId], map: "purchases_orderId_fkey")
  @@index([productId], map: "purchases_productId_fkey")
  @@map("purchases")
}

model Wallet {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  userId      Int       @db.UnsignedInt
  type        String
  amount      Int
  status      String
  reference   String?
  description String?
  createdAt   DateTime  @default(now())
  processedAt DateTime?
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("wallet_transactions")
}

model TurnoverPool {
  id            Int                @id @default(autoincrement()) @db.UnsignedInt
  totalAmount   Int                @default(0)
  l1Amount      Int                @default(0)
  l2Amount      Int                @default(0)
  l3Amount      Int                @default(0)
  l4Amount      Int                @default(0)
  l5Amount      Int                @default(0)
  distributed   Boolean            @default(false)
  createdAt     DateTime           @default(now())
  distributedAt DateTime?
  distributions PoolDistribution[]

  @@index([distributed])
  @@index([createdAt])
  @@map("turnover_pool")
}

model PoolDistribution {
  id               Int          @id @default(autoincrement()) @db.UnsignedInt
  poolId           Int          @db.UnsignedInt
  createdAt        DateTime     @default(now())
  adminId          Int?         @db.UnsignedInt
  distributedAt    DateTime?
  distributionType String       @default("POOL_PLAN")
  l1Amount         Float        @default(0)
  l1UserCount      Int          @default(0)
  l2Amount         Float        @default(0)
  l2UserCount      Int          @default(0)
  l3Amount         Float        @default(0)
  l3UserCount      Int          @default(0)
  l4Amount         Float        @default(0)
  l4UserCount      Int          @default(0)
  l5Amount         Float        @default(0)
  l5UserCount      Int          @default(0)
  status           String       @default("PENDING")
  totalAmount      Float        @default(0)
  admin            User?        @relation("AdminDistributions", fields: [adminId], references: [id])
  pool             TurnoverPool @relation(fields: [poolId], references: [id])

  @@index([poolId])
  @@index([status])
  @@index([distributionType])
  @@index([createdAt])
  @@index([adminId], map: "pool_distributions_adminId_fkey")
  @@map("pool_distributions")
}

model SelfIncomeInstallment {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  userId     Int       @db.UnsignedInt
  purchaseId Int       @db.UnsignedInt
  amount     Int
  weekNumber Int
  status     String    @default("scheduled")
  dueDate    DateTime
  paidAt     DateTime?
  createdAt  DateTime  @default(now())
  purchase   Purchase  @relation(fields: [purchaseId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([dueDate])
  @@index([purchaseId], map: "self_income_installments_purchaseId_fkey")
  @@map("self_income_installments")
}

model NewWithdrawal {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  userId      Int       @db.UnsignedInt
  amount      Int
  status      String    @default("requested")
  bankDetails String?   @db.Text
  adminNotes  String?   @db.Text
  createdAt   DateTime  @default(now())
  processedAt DateTime?
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("new_withdrawals")
}

model Team {
  id                 Int          @id @default(autoincrement()) @db.UnsignedInt
  completedAt        DateTime?
  formationDate      DateTime     @default(now())
  member1Id          Int?         @db.UnsignedInt
  member2Id          Int?         @db.UnsignedInt
  member3Id          Int?         @db.UnsignedInt
  status             TeamStatus   @default(FORMING)
  teamLeaderId       Int          @db.UnsignedInt
  teamSequenceNumber Int?
  members            TeamMember[]
  member1            User?        @relation("TeamMember1", fields: [member1Id], references: [id])
  member2            User?        @relation("TeamMember2", fields: [member2Id], references: [id])
  member3            User?        @relation("TeamMember3", fields: [member3Id], references: [id])
  teamLeader         User         @relation("TeamLeader", fields: [teamLeaderId], references: [id])

  @@index([teamLeaderId])
  @@index([status])
  @@index([formationDate])
  @@index([teamSequenceNumber])
  @@index([member1Id], map: "teams_member1Id_fkey")
  @@index([member2Id], map: "teams_member2Id_fkey")
  @@index([member3Id], map: "teams_member3Id_fkey")
  @@map("teams")
}

model TeamMember {
  id       Int      @id @default(autoincrement()) @db.UnsignedInt
  teamId   Int      @db.UnsignedInt
  userId   Int      @db.UnsignedInt
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@index([teamId])
  @@index([userId])
  @@map("team_members")
}

model SelfIncomePayment {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  userId     Int       @db.UnsignedInt
  purchaseId Int       @db.UnsignedInt
  weekNumber Int
  amount     Float     @default(0)
  dueDate    DateTime
  paidDate   DateTime?
  status     String    @default("pending")
  adminId    Int?      @db.UnsignedInt
  adminNotes String?   @db.Text
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  admin      User?     @relation("AdminSelfIncomePayments", fields: [adminId], references: [id])
  purchase   Purchase  @relation("PurchaseSelfIncomePayments", fields: [purchaseId], references: [id])
  user       User      @relation("UserSelfIncomePayments", fields: [userId], references: [id])

  @@index([userId])
  @@index([purchaseId])
  @@index([status])
  @@index([dueDate])
  @@index([weekNumber])
  @@index([adminId], map: "self_income_payments_adminId_fkey")
  @@map("self_income_payments")
}

model PoolTransaction {
  id              Int      @id @default(autoincrement()) @db.UnsignedInt
  userId          Int      @db.UnsignedInt
  purchaseId      Int      @db.UnsignedInt
  amountToPool    Float    @default(0)
  transactionDate DateTime @default(now())
  purchaseType    String   @default("first")
  productId       Int      @db.UnsignedInt
  mlmPriceAtTime  Float    @default(0)
  poolContributed Boolean  @default(false)
  createdAt       DateTime @default(now())
  product         Product  @relation("ProductPoolTransactions", fields: [productId], references: [id])
  purchase        Purchase @relation("PurchasePoolTransactions", fields: [purchaseId], references: [id])
  user            User     @relation("UserPoolTransactions", fields: [userId], references: [id])

  @@index([userId])
  @@index([purchaseId])
  @@index([purchaseType])
  @@index([transactionDate])
  @@index([poolContributed])
  @@index([productId], map: "pool_transactions_productId_fkey")
  @@map("pool_transactions")
}

model ReferralTracking {
  id                     Int       @id @default(autoincrement()) @db.UnsignedInt
  referrerId             Int       @db.UnsignedInt
  referredUserId         Int       @db.UnsignedInt
  referralDate           DateTime  @default(now())
  firstPurchaseCompleted Boolean   @default(false)
  teamContributionStatus String    @default("pending")
  referralCodeUsed       String?
  firstPurchaseId        Int?      @db.UnsignedInt
  firstPurchaseDate      DateTime?
  teamFormationTriggered Boolean   @default(false)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  firstPurchase          Purchase? @relation("ReferralFirstPurchase", fields: [firstPurchaseId], references: [id])
  referredUser           User      @relation("UserReferredBy", fields: [referredUserId], references: [id])
  referrer               User      @relation("UserReferrals", fields: [referrerId], references: [id])

  @@index([referrerId])
  @@index([referredUserId])
  @@index([firstPurchaseCompleted])
  @@index([teamContributionStatus])
  @@index([referralDate])
  @@index([firstPurchaseId], map: "referral_tracking_firstPurchaseId_fkey")
  @@map("referral_tracking")
}

model KYCSubmission {
  id                Int       @id @default(autoincrement()) @db.UnsignedInt
  userId            Int       @db.UnsignedInt
  submissionDate    DateTime  @default(now())
  documentUrls      Json?
  status            KYCStatus @default(PENDING)
  adminComments     String?   @db.Text
  reviewedByAdminId Int?      @db.UnsignedInt
  reviewedDate      DateTime?
  rejectionReason   String?   @db.Text
  resubmissionCount Int       @default(0)
  documentType      String?
  verificationNotes String?   @db.Text
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  reviewedByAdmin   User?     @relation("AdminReviewedKYC", fields: [reviewedByAdminId], references: [id])
  user              User      @relation("UserKYCSubmissions", fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([submissionDate])
  @@index([reviewedByAdminId])
  @@index([isActive])
  @@map("kyc_submissions")
}

enum OrderStatus {
  inProcess
  pending
  delivered
}

enum ProductType {
  REGULAR
  TRENDING
  MLM
}

enum MLMLevel {
  NONE
  L1
  L2
  L3
  L4
  L5
}

enum KYCStatus {
  PENDING
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  RESUBMISSION_REQUIRED
}

enum TeamStatus {
  FORMING
  COMPLETE
  DISBANDED
}
